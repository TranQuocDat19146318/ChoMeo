pip install mtcnn

from keras.datasets               import cifar100
from keras.utils                  import np_utils
from keras.models                 import Sequential
from keras.layers                 import Dense, Activation, BatchNormalization, Dropout, LSTM
from keras.layers                 import Conv2D
from keras.layers                 import MaxPooling2D
from keras.layers                 import Flatten
from keras.callbacks              import EarlyStopping 
from tensorflow.keras.optimizers  import SGD
import matplotlib.pyplot as plt
import numpy as np
from mtcnn                        import MTCNN
from matplotlib.image             import imread

from matplotlib import image
folder='/content/drive/MyDrive/data/train/'
for i in range(9):
    plt.subplot(330+i+1)
    filename=folder+'cats/'+'cat.'+ str(i)+'.jpg'
    image=imread(filename)
    plt.imshow(image)
plt.show()

from matplotlib import image
folder='/content/drive/MyDrive/data/train/'
for i in range(9):
    plt.subplot(330+i+1)
    filename=folder+'dogs/'+'dog.'+ str(i)+'.jpg'
    image=imread(filename)
    plt.imshow(image)
plt.show()

from os import listdir
from numpy import asarray
from numpy import save
from keras.preprocessing.image import load_img,img_to_array
from numpy.lib.npyio import load
folder='/content/drive/MyDrive/data/train/cats/'
photos,labels=list(),list()
for file in listdir(folder):
    output=0.
    if file.startswith('cat'):
        output=1.0
    photo=load_img(folder+file,target_size=(200,200))
    photo=img_to_array(photo)
    photos.append(photo)
    labels.append(output)
photos=asarray(photos)
labels=asarray(labels)
print(photos.shape,labels.shape)
save('dog_vs_cat_photos.npy',photos)
save('dog_vs_cat_photos.npy',labels)

from keras import datasets, Sequential
from keras.layers import Conv2D, Dense, MaxPooling2D, Flatten
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import numpy as np
from keras.utils import np_utils
from keras.datasets import cifar10
import matplotlib.pyplot as plt
from tensorflow.keras.optimizers import Adam
from keras.preprocessing import  image
from keras.preprocessing.image import load_img, img_to_array,array_to_img,ImageDataGenerator
import numpy as np
import os
import cv2 as cv
people = ['cats','dogs']
dir_train = '/content/drive/MyDrive/data/train' 
distpath = []
y_train = []
x_train = []
x_test = []
y_test = []
# Tạo dữ liệu
def create_data(dir, x_train, y_train):
  for i in people:
    path = os.path.join(dir,i)
    index_label = people.index(i)
    for j in os.listdir(path):
      img_path = os.path.join(path, j)
      img = image.load_img(img_path, target_size=(200,200)) # độ phân giải tùy ae chọn nhé!
      img = img_to_array(img)
      img = img.reshape(200,200,3) #hàm reshape phải có cùng độ phân giải với target_size của nhé
      img = img.astype('float32')
      img = img/255
      x_train.append(img)
      y_train.append(index_label)
create_data(dir_train, x_train, y_train) #tạo dữ liệu 
# xử lí dữ liệu
x_train = np.array(x_train)
y_train = np.array(y_train)
y_train = np_utils.to_categorical(y_train)
print(x_train.shape) # nhớ chú ý kích thước hình ảnh để tí cho vào input của model
print(y_train.shape)

model=Sequential()
# Block 1/3
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(200, 200, 3))) 
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu', kernel_initializer='he_uniform')) 
model.add(Dense(2, activation='sigmoid'))

  opt=SGD(learning_rate=0.01,momentum=0.9)
  model.compile(loss='binary_crossentropy',optimizer=opt, metrics=['accuracy'])
  history = model.fit(x_train,y_train,epochs = 20)
  
  pic = image.load_img('/content/cat.18.jpg', target_size=(200,200)) # độ phân giải tùy ae chọn nhé!
plt.imshow(pic)
pic = img_to_array(pic)
pic = pic.reshape(1,200,200,3) 
pic = pic.astype('float32')
pic = pic/255
np.argmax(model.predict(pic), axis=1)
